<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[likelight's home]]></title>
  <link href="http://likelight.github.io/atom.xml" rel="self"/>
  <link href="http://likelight.github.io/"/>
  <updated>2014-09-07T21:59:03+08:00</updated>
  <id>http://likelight.github.io/</id>
  <author>
    <name><![CDATA[likelight]]></name>
    <email><![CDATA[shenruoliang@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jquery事件绑定总结]]></title>
    <link href="http://likelight.github.io/blog/2014/09/07/jqueryshi-jian-bang-ding-zong-jie/"/>
    <updated>2014-09-07T21:58:08+08:00</updated>
    <id>http://likelight.github.io/blog/2014/09/07/jqueryshi-jian-bang-ding-zong-jie</id>
    <content type="html"><![CDATA[<p><strong>最近对于事件绑定处理用的比较多，进行总结一下</strong>
<img src="./20110608013425637.png" alt="Alt text" /></p>

<h2>bind</h2>

<blockquote><p>单个元素的事件绑定
扫描文档找出所有的$(‘a&#8217;)元素，并把alert函数绑定到每个元素的click事件上。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;That tickles!&#39;</span><span class="p">);})</span>
</span></code></pre></td></tr></table></div></figure>


<p>备注：
bind并不能对未来添加的元素绑定事件;原理和直接$(&ldquo;a&rdquo;).click是同一机制</p>

<h2>live</h2>

<blockquote><p>作为事件冒泡的流程，默认将事件绑定到$(document)元素上，采用事件代理的模式
任何时候只要有事件冒泡到document节点上，它就查看该事件是否是一个如：click事件，以及该事件的目标元素与&#8217;a&#8217;这一CSS选择器是否匹配，如果都是的话，则执行函数。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;That tickles!&#39;</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>备注：以上代码首先要扫描整个的文档查找所有的$(‘a&#8217;)元素，把它们存成jQuery对象，效率较低;
只能监听css选择器</p>

<h2>delegate</h2>

<blockquote><p>和live很相似，需要指定事件代理的监听方，效率高于live</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#container&#39;</span><span class="p">).</span><span class="nx">delegate</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;That tickles!&#39;</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>备注：当很多元素需要监听时，较低开销</p>

<h2>on</h2>

<blockquote><p>jquery1.7之后的推荐事件绑定用法</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="nx">events</span> <span class="p">[,</span> <span class="nx">selector</span><span class="p">]</span> <span class="p">[,</span> <span class="nx">data</span><span class="p">],</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">eventObject</span><span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){})</span>
</span></code></pre></td></tr></table></div></figure>


<p>事件代理使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){})</span>
</span></code></pre></td></tr></table></div></figure>


<p>监听div标签下a的点击事件</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手机前端调试环境搭建总结]]></title>
    <link href="http://likelight.github.io/blog/2014/09/07/shou-ji-qian-duan-diao-shi-huan-jing-da-jian-zong-jie/"/>
    <updated>2014-09-07T21:45:29+08:00</updated>
    <id>http://likelight.github.io/blog/2014/09/07/shou-ji-qian-duan-diao-shi-huan-jing-da-jian-zong-jie</id>
    <content type="html"><![CDATA[<p>@(实习)[网络|帮助|软件]</p>

<h2>实现目的</h2>

<p>公司上司提出一个移动端的适配要求，需要在手机端访问适配官网，在完成编码后需要进行测试在公司各套网络环境下搭建可用手机测试的环境;</p>

<h2>预备知识</h2>

<p><strong>开发环境</strong></p>

<blockquote><p>开发环境是程序员代码环境.连接ip: 完成开发后通过svn提交到测试环境;</p></blockquote>

<p><strong>测试环境</strong></p>

<blockquote><p>测试环境是测试人员测试代码环境，通过svn co 出对应版本,进行测试工作的环境,基本与开发环境一致;</p></blockquote>

<p><strong>预发环境</strong></p>

<blockquote><p>预发环境是测试人员经过测试通过后，需要将代码提交到预发环境下进行发布前的最后测试，基本设置与线网发布环境一致;</p></blockquote>

<p><strong>发布环境</strong></p>

<blockquote><p>普通用户能够正常访问到的环境，即如：www.baidu.com</p></blockquote>

<h2>环境搭建</h2>

<p>-<strong>本地环境调试</strong>：
1，<strong>模拟设备访问</strong>：</p>

<blockquote><p>在用真机调试前，可以先用模拟设备访问网页,实现多终端，多平台的测试目的。
chrome提供了强大的模拟环境，可以自由模拟访问设备，设置user-agent,设置设备分辨率
<a href="http://jingyan.baidu.com/article/ea24bc39a7c1d1da62b331b2.html">教程点击</a></p></blockquote>

<p>2，<strong>真机本地调试</strong></p>

<blockquote><p>本机调试的话就是用手机访问本地的资源，需要在本地有着代码环境，并有着搭建好的本地服务器环境;
用手机和电脑都通过wifi连入同一个网段，在手机端安装chrome 浏览器后用数据线将手机和PC相连即可实现在pc端调试手机端网页的功能；
<a href="http://tieba.baidu.com/p/3023322395">教程详解</a>,亲测需要电脑翻墙。</p></blockquote>

<p><strong>其他环境测试</strong></p>

<blockquote><p>除发布环境可以直接通过输入域名访问外，其他环境要用手机访问都需要通过修改host和绑定dns方法；
修改手机host是让你可以在输入域名之后能够自动映射到对应的ip地址;
(此方法过于繁琐,需要android手机root和将对应环境网段的hosts覆盖到手机的/etc/hosts下)</p></blockquote>

<p><strong>代理环境调试</strong></p>

<blockquote><p>即利用你本地pc作为网络代理，手机访问的数据包走pc端,这样就可以省去对于手机的各种设置.只需要在pc端切换各种网络环境下的hosts,即可实现手机访问各种测试环境.
需要在本地pc上安装代理软件，如：Charles;
<a href="http://www.myexception.cn/mobile/1603832.html">设置教程</a>
,当手机访问页面时能给被charles抓到包时即证明手机已通过走pc代理访问。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[first]]></title>
    <link href="http://likelight.github.io/blog/2014/09/06/first/"/>
    <updated>2014-09-06T18:55:16+08:00</updated>
    <id>http://likelight.github.io/blog/2014/09/06/first</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
